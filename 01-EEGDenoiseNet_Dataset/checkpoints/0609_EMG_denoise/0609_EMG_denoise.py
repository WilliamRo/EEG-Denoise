import sys
sys.argv.append('--train=False')
sys.argv.append('--overwrite=False')
sys.argv.append('--prefix=0609_')
# ------------------------- auto generated by tframe -------------------------

import sys, os 
from tkinter.tix import Tree
sys.path.append(os.path.abspath('../../../xai-kit'))
sys.path.append(os.path.abspath('../../../'))
sys.path.append(os.path.abspath('../../../xai-kit/roma'))
sys.path.append(os.path.abspath('../../../xai-kit/pictor'))
sys.path.append(os.path.abspath('../../../eeg'))

from tframe import tf
from tframe import console
from tframe.utils.misc import date_string
from tframe.utils.organizer.task_tools import update_job_dir
from eeg.dtpnet import DTPNet     

import eeg_core as core
import eeg_mu as m



# -----------------------------------------------------------------------------
# Define model here
# -----------------------------------------------------------------------------
model_name = 'EMG_denoise'
id = 1
def model():
  th = core.th
  model = m.get_container(flatten=False)
  net = DTPNet(N=th.filter_num, L=th.filter_length, B=th.bottle_neck_channel, H=th.block_chnnum,
                P=th.block_kernel_size, X=th.conv_num, R=th.repeats_num)
  print('Model Choice-->> BaseNet+TPB+Dense')
  net.add_to(model)

  return m.finalize(model, metric=th.metric, dense=False)



def main(_):
  console.start('{} on EEG Signal task'.format(model_name.upper()))

  th = core.th
  th.rehearse = True
  # ---------------------------------------------------------------------------
  # 0. date set setup
  # ---------------------------------------------------------------------------
  ## Choose the artifacts type
  th.noise_type = ['EMG', 'EOG', 'EMG_EOG'][0]

  th.dataset = ['eegdenoisenet', 'semi_simulated'][0]
  th.sequence_length = None
  th.input_shape = [th.sequence_length, 1]
  th.output_dim = th.sequence_length

  ## The proportion of the training data in the total data, 
  ## the test and validation sets each account for half of the remaining data
  th.train_per = 0.8
  # ---------------------------------------------------------------------------
  # 1. folder/file names and device
  # ---------------------------------------------------------------------------
  # update_job_dir(id, model_name)
  th.job_dir = os.getcwd()
  summ_name = model_name
  th.prefix = '{}_'.format(date_string())
  th.visible_gpu_id = 1
  # ---------------------------------------------------------------------------
  # 2_1. model structure
  # ---------------------------------------------------------------------------
  if th.noise_type == 'EMG':
    ## EMG Setting
    th.filter_num = 454
    th.filter_length = 23
    th.bottle_neck_channel = 64
    th.block_chnnum = 438
    th.block_kernel_size = 4
    th.conv_num = 5
    th.repeats_num = 7
  elif th.noise_type == 'EOG':
    ## EOG Setting
    th.filter_num = 248
    th.filter_length = 32
    th.bottle_neck_channel = 64
    th.block_chnnum = 394
    th.block_kernel_size = 4
    th.conv_num = 6
    th.repeats_num = 6
  elif th.noise_type == 'EMG_EOG':
    ## EMG EOG Setting
    th.filter_num = 305
    th.filter_length = 26
    th.bottle_neck_channel = 64
    th.block_chnnum = 243
    th.block_kernel_size = 3
    th.conv_num = 5
    th.repeats_num = 5
  else:
    AssertionError('Noise Type Is Not Set Correctly!')
  # ---------------------------------------------------------------------------
  # 2_2. model setup
  # ---------------------------------------------------------------------------
  th.model = model

  th.activation = 'relu'
  th.dropout = 0.5
  th.kernel_size = 3
  th.use_batchnorm = False
  # ---------------------------------------------------------------------------
  # 3. trainer setup
  # ---------------------------------------------------------------------------
  th.epoch = 2000
  th.batch_size = 32
  th.val_batch_size = 40

  th.patience = 30
  th.optimizer = 'adam'
  th.learning_rate = 0.000458
  th.optimizer_epsilon = 1e-7

  th.train =True
  th.overwrite = True
  th.print_cycle = 5
  th.probe_cycle = 5
  th.validation_per_round = 1

  th.save_model = True
  th.metric = 'mse'
  # ---------------------------------------------------------------------------
  # 4. other stuff and activate
  # ---------------------------------------------------------------------------
  th.clear_records_before_training = True
  th.export_tensors_upon_validation = True

  th.mark = 'EMG_denoise'
  th.gather_summ_name = th.prefix + summ_name + th.noise_type +'.sum'

  if _ == '*': return
  core.activate()


if __name__ == '__main__':
  console.suppress_logging()
  tf.app.run()



